package com.tiandetech.jbcc.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;


public class JBCCClient {
	
	private static final JBCCClient instance = new JBCCClient();
	
	
	private JBCCClient() {
	}
	
	
	public static JBCCClient getInstance(){
        return instance;
    }
	
	//Change to service discovery
	private JBCCService.Client ConnectToService(String serviceName) throws TException
	{
		
			TTransport transport;
			transport = new TSocket("localhost", 9090);
			transport.open();
			TProtocol protocol = new TBinaryProtocol(transport);
			JBCCService.Client myJBCCClient=new JBCCService.Client(protocol);
			return myJBCCClient;
	}
	
	
	public JBCCResult insertToBC (String content, String TBCName) throws TException
	{
		JBCCService.Client myJBCCClient = ConnectToService(TBCName);
		
    	JBCCResult returnresult = new JBCCResult();
		try
        {
            returnresult = myJBCCClient.insert(content, TBCName);
        } catch (JBCCException e){}
        
        return returnresult;
        
		
	}
	
	public JBCCResult selectFromBC (String TBCName, String condition) throws TException
	{
		JBCCService.Client myJBCCClient = ConnectToService(TBCName);
		
    	JBCCResult returnresult = new JBCCResult();
		try
        {
            returnresult = myJBCCClient.select(TBCName, condition);
        } catch (JBCCException e){}
        
        return returnresult;
        
		
	}
	
	public JBCCResult fastselectFromBC (String TBCName, String condition) throws TException
	{
		JBCCService.Client myJBCCClient = ConnectToService(TBCName);
		
    	JBCCResult returnresult = new JBCCResult();
		try
        {
            returnresult = myJBCCClient.fselect(TBCName, condition);
        } catch (JBCCException e){}
        
        return returnresult;
        
		
	}
	
	public JBCCResult createTBC(String TBCdef) throws TException
	{
		JBCCService.Client myJBCCClient = ConnectToService("TBCName");
		
    	JBCCResult returnresult = new JBCCResult();
		try
        {
            returnresult = myJBCCClient.createTBC(TBCdef);
        } catch (JBCCException e){}
        
        return returnresult;
		
	}
	
	public JBCCResult createABC(String ABCdef) throws TException
	{
		JBCCService.Client myJBCCClient = ConnectToService("TBCName");
		
    	JBCCResult returnresult = new JBCCResult();
		try
        {
            returnresult = myJBCCClient.createABC(ABCdef);
        } catch (JBCCException e){}
        
        return returnresult;
		
	}
	
	 /**
     * @param args
     * @throws TException 
     */
    public static void main(String[] args) throws TException
    {
    		/**
    		TTransport transport;
            transport = new TSocket("localhost", 9090);
            transport.open();
            TProtocol protocol = new TBinaryProtocol(transport);
            
            JBCCService.Client myJBCCClient=new JBCCService.Client(protocol);
            **/
    	
            JBCCClient myJBCCClient = JBCCClient.getInstance();
            
            long start=System.currentTimeMillis();
            
            for (int i=0;i<10000;i++)
            {
            	try
            	{
            		myJBCCClient.fastselectFromBC("TBC1", String.valueOf(i));
            	}
            	catch (JBCCException e){}
            }
            long end=System.currentTimeMillis();
            System.out.println((end-start)+" ms");

    }


}
