package tutorial;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import tutorial.MultiplicationService.AsyncClient;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class Client {

    public static final int THREAD_NUM = 8;
    private static final CountDownLatch latch = new CountDownLatch(THREAD_NUM);

    public static void main(String[] args) throws IOException, InterruptedException {

        // Make the pool
        Thrift t = new Thrift(THREAD_NUM, THREAD_NUM, "localhost", 8090);

        long start = System.currentTimeMillis();
        for (int i = 0; i < THREAD_NUM; i++) {
            t.req(new MyThriftRequest());// Use the pool
        }

        latch.await(60, TimeUnit.SECONDS);
        long elapsedTime = System.currentTimeMillis() - start;
        System.out.println("elapsed time is (s): " + elapsedTime / 1000);
    }

    static class MyThriftRequest extends Thrift.ThriftRequest {

        @Override
        public void on(AsyncClient cli) {
            try {
                cli.multiply(2, 5, new AsyncMethodCallback<AsyncClient.multiply_call>() {

                    @Override
                    public void onComplete(AsyncClient.multiply_call response) {
                        try {
                            System.out.println("AsynCall result =:" + response.getResult());
                        } catch (TException e) {
                            e.printStackTrace();
                        } finally {
                            latch.countDown();
                        }
                    }

                    @Override
                    public void onError(Exception e) {
                        System.out.println("onError :" + e.getMessage());
                        latch.countDown();
                    }
                });
            } catch (TException e) {
                e.printStackTrace();
            }
        }
    }
}