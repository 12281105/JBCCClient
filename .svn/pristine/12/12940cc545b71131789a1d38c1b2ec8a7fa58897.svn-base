package com.tiandetech.jbcc.thrift.client;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.recipes.cache.PathChildrenCache;
import org.apache.curator.framework.recipes.cache.PathChildrenCacheEvent;
import org.apache.curator.framework.recipes.cache.PathChildrenCacheListener;
import org.apache.curator.framework.recipes.cache.PathChildrenCache.StartMode;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.tiandetech.blockchain.thrift.blockchainNetwork.JBCCException;
import com.tiandetech.blockchain.thrift.blockchainNetwork.JBCCResult;
import com.tiandetech.blockchain.thrift.blockchainNetwork.JBCCService;
import com.tiandetech.util.BCKeeperSharies;
import com.tiandetech.util.BCKeeperUtil;





public class JBCCClient {
	
	private static final JBCCClient instance = new JBCCClient();
	private ArrayList<ConnectionStruct> connectionStructList = new ArrayList<ConnectionStruct>();
	private ArrayList<AsyncConnection> asynconnectionList = new ArrayList<AsyncConnection>();
	private HashMap<String, ConnectionStruct> syncConnectionHashMap = new HashMap<String, ConnectionStruct>();
	private HashMap<String, AsyncConnection> asyncConnectionHashMap = new HashMap<String, AsyncConnection>();
	private String zookeeperrootpath = null;
	private String zookeeperhosts = null;
	
	private JBCCClient() {
	}
	
	
	public static JBCCClient getInstance(){
        return instance;
    }
	
	
	
	
	public void InitializeClient(String zookeeperhosts, String zookeeperrootpath)
	{
		this.zookeeperrootpath = zookeeperrootpath;
		this.zookeeperhosts = zookeeperhosts;
		BCKeeperUtil.zookeeperConnectString = zookeeperhosts;
		
		StartZooKeeperWatch(zookeeperrootpath);
		
	}
	
	private void StartZooKeeperWatch(String zkrootpath) {
		 final PathChildrenCache childrenCache4HeartBeat = new PathChildrenCache(BCKeeperUtil.getClient(), zkrootpath+"/online", true);
		
		 try {
			childrenCache4HeartBeat.start(StartMode.POST_INITIALIZED_EVENT);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	        childrenCache4HeartBeat.getListenable().addListener(
	            new PathChildrenCacheListener() {
	                @Override
	                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)
	                        throws Exception {
	                        switch (event.getType()) {
	                        case CHILD_ADDED:
	                            
	                        	System.out.println("New Node Detected");
	                            
	                            break;
	                        case CHILD_REMOVED:
	                        	
	                        	System.out.println("Node Removed");
	                        	
	                        	break;
	                        case CHILD_UPDATED:
	                        	
	                        	System.out.println("Nodes Updated");
	                        	
	                        	break;
	                        case CONNECTION_RECONNECTED:
	                        	
	                        	break;
	                        default:
	                            break;
	                    }
	                }
	            }
	        );
		 
	}


	//from zookeeper
	public List<String> GetNodeAddress(String rootpath)
	{
		List<String> childs = null;
		
		try {
			childs = BCKeeperUtil.getClient().getChildren().forPath(rootpath+"/online");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		List<String> IPAddresses = new ArrayList<String>();
		
		if (childs != null)
		{
			for(String child : childs){
		    	byte[] data = null;
				try {
					data = BCKeeperUtil.getClient().getData().forPath(rootpath+"/online/"+child);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    	JSONObject json = null;
		    	if (data != null)
		    	{
					try {
						json = JSON.parseObject(new String(data,"utf-8"));
					} catch (UnsupportedEncodingException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		    	}
		    	if (json != null)
		    	{
		    		String ip = json.getString("ip");
		    		if(ip!=null && !"".equals(ip.trim())){
		    			IPAddresses.add(ip);
		    		}
		    	}
		    }
		}
		
		return IPAddresses;	
		
	}
	

	//Change to service discovery
	private JBCCResult ConnectToService(String serviceName) throws TException
	{
			int PORT = 9090;
			JBCCResult _jbccresult = new JBCCResult();
			
			//List<String> addresses = GetNodeAddress("rootpath");
			List<String> addresses = new ArrayList<String>();
			addresses.add("localhost");
			
			if (addresses == null || addresses.isEmpty())
			{
				_jbccresult.setStatus(0);
				_jbccresult.setMessage("No addresses from discovery.");
				return _jbccresult;
			}
			
			try{
				for (String address : addresses)
				{
					TTransport transport;
					transport = new TSocket(address, PORT);
					transport.open();
					TProtocol protocol = new TBinaryProtocol(transport);
					JBCCService.Client myJBCCClient=new JBCCService.Client(protocol);
					ConnectionStruct _connectionStruct = new ConnectionStruct(myJBCCClient, transport, protocol);
					connectionStructList.add(_connectionStruct);
				}
			}
			catch(TException e)
			{
				_jbccresult.setStatus(0);
				_jbccresult.setMessage("Thrift exception.");
				return _jbccresult;
			}
			
			
			
			_jbccresult.setStatus(1);
			return _jbccresult;
	}
	
	//Change to service discovery
		private JBCCResult ConnectToServiceSecure(String serviceName, String truststore, String password) throws TException
		{
				int PORT = 7911;
				JBCCResult _jbccresult = new JBCCResult();
				
				//List<String> addresses = GetNodeAddress("rootpath");
				List<String> addresses = new ArrayList<String>();
				addresses.add("localhost");
				
				if (addresses == null || addresses.isEmpty())
				{
					_jbccresult.setStatus(0);
					_jbccresult.setMessage("No addresses from discovery.");
					return _jbccresult;
				}
				
				try{
					for (String address : addresses)
					{
						TTransport transport;
						
						TSSLTransportFactory.TSSLTransportParameters params =
			                    new TSSLTransportFactory.TSSLTransportParameters();
			            params.setTrustStore(truststore, password);
			 
			            transport = TSSLTransportFactory.getClientSocket(address, PORT, 10000, params);
			            TProtocol protocol = new TBinaryProtocol(transport);
			            JBCCService.Client client = new JBCCService.Client(protocol);
						ConnectionStruct _connectionStruct = new ConnectionStruct(client, transport, protocol);
						connectionStructList.add(_connectionStruct);
					}
				}
				catch(TException e)
				{
					_jbccresult.setStatus(0);
					_jbccresult.setMessage("Thrift exception.");
					return _jbccresult;
				}
				
				_jbccresult.setStatus(1);
				return _jbccresult;
		}
	
	public JBCCResult OpenConnection(String servicename) throws TException
	{
		return ConnectToService(servicename);
	}
	
	public JBCCResult CloseConnection()
	{
		JBCCResult _jbccresult = new JBCCResult();
		
		for (ConnectionStruct _connectionStruct : connectionStructList)
		{
			_connectionStruct.get_transport().close();

		}
		connectionStructList.clear();
		
		_jbccresult.setStatus(1);
		return _jbccresult;
	}
	
	public JBCCResult OpenSecureConnection(String servicename, String truststore, String password) throws TException
	{
		return ConnectToServiceSecure(servicename, truststore, password);
	}
	
	
	
	public JBCCResult OpenAsyncConnection(String servicename, int max_client, int max_client_per_thread) throws TException
	{
		int PORT = 8989;
		
		JBCCResult _jbccresult = new JBCCResult();
		
		//List<String> addresses = GetNodeAddress("rootpath");
		List<String> addresses = new ArrayList<String>();
		addresses.add("localhost");
				
		if (addresses == null || addresses.isEmpty())
		{
			_jbccresult.setStatus(0);
			_jbccresult.setMessage("No addresses from discovery.");
			return _jbccresult;
		}
		
		try{
			for (String address : addresses)
			{

				AsyncConnection t = new AsyncConnection(max_client, max_client_per_thread, address, PORT);
				asynconnectionList.add(t);
			}
		}
		catch(IOException e)
		{
			_jbccresult.setStatus(0);
			_jbccresult.setMessage("Thrift IO exception.");
			return _jbccresult;
		}
		
		_jbccresult.setStatus(1);
		return _jbccresult;
	}
	
	public JBCCResult CloseAsyncConnection()
	{
		JBCCResult _jbccresult = new JBCCResult();
		
		for (AsyncConnection _connectionStruct : asynconnectionList)
		{
			_connectionStruct.CloseConnections();

		}
		asynconnectionList.clear();
		
		_jbccresult.setStatus(1);
		return _jbccresult;
	}
	

	
	public void AsyncInsertToBC(String TBCName, String content, ArrayList<JBCCResult> results)
	{
		JBCCResult returnresult = new JBCCResult();
		
		if (asynconnectionList.isEmpty())
		{
			returnresult.setStatus(0);
			returnresult.setMessage("No open async connections.");
			results.add(returnresult);
			return;
		}
		
		for (AsyncConnection _connectionStruct : asynconnectionList)
		{
			if (_connectionStruct == null)
			{
				returnresult.setStatus(0);
				returnresult.setMessage("Could not retrieve Thrift client.");
				results.add(returnresult);
				return;
			}
	
			AsyncInsertRequest _insertRequest = new AsyncInsertRequest();
			_insertRequest.set_content(content);
			_insertRequest.set_TBCName(TBCName);
			_insertRequest.setResults(results);
	        _connectionStruct.req(_insertRequest);

		}
		
	    return;
	}
	
	//takes in a JSON object in string form
	public List<JBCCResult> insertToBC (String TBCName, String content) throws TException
	{
		
			ArrayList<JBCCResult> returnresult = new ArrayList<JBCCResult>();
			JBCCResult _returnresult = new JBCCResult();
			
			if (connectionStructList.isEmpty())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("No open connections.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			for (ConnectionStruct _connectionStruct : connectionStructList)
			{
				
				JBCCService.Client myJBCCClient=_connectionStruct.get_client();
				
				if (myJBCCClient == null)
				{
					_returnresult.setStatus(0);
					_returnresult.setMessage("Could not retrieve thrift client");
					returnresult.add(_returnresult);
					return returnresult;
				}
				
				try
		        {	
					JBCCResult returnresultback = myJBCCClient.insert(TBCName, content);   
					returnresult.add(returnresultback);
		        } catch (JBCCException e){
		        	_returnresult.setStatus(0);
					_returnresult.setMessage(e.getMessage());
					returnresult.add(_returnresult);
					return returnresult;
		        }

			}
			
		    return returnresult;
        
		
	} 
	
	//takes in a JSON object in string form
	public List<JBCCResult> selectFromBC (String TBCName, String condition) throws TException
	{
		
			ArrayList<JBCCResult> returnresult = new ArrayList<JBCCResult>();
			JBCCResult _returnresult = new JBCCResult();
			
			if (connectionStructList.isEmpty())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("No open connections.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			for (ConnectionStruct _connectionStruct : connectionStructList)
			{

				
				JBCCService.Client myJBCCClient=_connectionStruct.get_client();
				
				if (myJBCCClient == null)
				{
					_returnresult.setStatus(0);
					_returnresult.setMessage("Could not retrieve Thrift client.");
					returnresult.add(_returnresult);
					return returnresult;
				}
				
				try
		        {	
		            JBCCResult returnresultback = myJBCCClient.select(TBCName, condition);
		            returnresult.add(returnresultback);
		        } catch (JBCCException e){
		        	_returnresult.setStatus(0);
					_returnresult.setMessage(e.getMessage());
					returnresult.add(_returnresult);
					return returnresult;
		        }
				
			}
	
		    return returnresult;
		
	}
	
	public void asyncSelectFromBC (String TBCName, String condition, ArrayList<JBCCResult> results) throws TException
	{
		
			JBCCResult returnresult = new JBCCResult();
			
			if (asynconnectionList.isEmpty())
			{
				returnresult.setStatus(0);
				returnresult.setMessage("No open connections.");
				results.add(returnresult);
				return;
			}
			
			for (AsyncConnection _connectionStruct : asynconnectionList)
			{
				if (_connectionStruct == null)
				{
					returnresult.setStatus(0);
					returnresult.setMessage("Could not retrieve Thrift client.");
					results.add(returnresult);
					return;
				}
		
				AsyncSelectRequest _selectRequest = new AsyncSelectRequest();
				_selectRequest.set_condition(condition);
				_selectRequest.set_TBCName(TBCName);
				_selectRequest.setResults(results);
		        _connectionStruct.req(_selectRequest);

			}
	
		    return;
		
	}
	
	
	
	//takes in a JSON object in string form
	//read from the first node
	public JBCCResult fastselectFromBC (String TBCName, String condition) throws TException
	{
			JBCCResult returnresult = new JBCCResult();
			
			if (connectionStructList.isEmpty())
			{
				returnresult.setStatus(0);
				returnresult.setMessage("No open connections.");
				return returnresult;
			}
			
			/*
			for (ConnectionStruct _connectionStruct : connectionStructList)
			{
				
				JBCCService.Client myJBCCClient=_connectionStruct.get_client();
				
				if (myJBCCClient == null)
				{
					returnresult.setStatus(0);
					returnresult.setMessage("Could not retrieve Thrift client.");
					return returnresult;
				}
				
				try
		        {	
		            returnresult = myJBCCClient.fselect(TBCName, condition);   
		        } catch (JBCCException e){
		        	returnresult.setStatus(0);
					returnresult.setMessage(e.getMessage());
					return returnresult;
		        }
				
			}*/
			
			JBCCService.Client myJBCCClient=connectionStructList.get(0).get_client();
			
			if (myJBCCClient == null)
			{
				returnresult.setStatus(0);
				returnresult.setMessage("Could not retrieve Thrift client.");
				return returnresult;
			}
			
			try
	        {	
	            returnresult = myJBCCClient.fselect(TBCName, condition);   
	        } catch (JBCCException e){
	        	returnresult.setStatus(0);
				returnresult.setMessage(e.getMessage());
				return returnresult;
	        }
			

			returnresult.setStatus(1);
		    return returnresult;
		
	}
	
	//takes in a JSON object in string form
	public List<JBCCResult> createTBC(String TBCName, String TBCdef) throws TException
	{
		
			ArrayList<JBCCResult> returnresult = new ArrayList<JBCCResult>();
			JBCCResult _returnresult = new JBCCResult();
			
			if (connectionStructList.isEmpty())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("No open connections.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			TDLValidateResult tdlValidateResult = TDLParser.validateTableJson(TBCdef);
			
			if (!tdlValidateResult.getSuccess())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("Table creation string invalid format.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			for (ConnectionStruct _connectionStruct : connectionStructList)
			{
				JBCCService.Client myJBCCClient=_connectionStruct.get_client();
				
				if (myJBCCClient == null)
				{
					_returnresult.setStatus(0);
					_returnresult.setMessage("Could not retrieve Thrift client.");
					returnresult.add(_returnresult);
					return returnresult;
				}
				
				try
		        {	
					JBCCResult returnresultback = myJBCCClient.createTBC(TBCName, TBCdef);  
					returnresult.add(returnresultback);
		            
		        } catch (JBCCException e){
		        	_returnresult.setStatus(0);
					_returnresult.setMessage(e.getMessage());
					returnresult.add(_returnresult);
					return returnresult;
		        }
			}

		    return returnresult;
		
	}
	
	//takes in a JSON object in string form
	public List<JBCCResult> createABC(String ABCname, String ABCdef) throws TException
	{
			ArrayList<JBCCResult> returnresult = new ArrayList<JBCCResult>();
			JBCCResult _returnresult = new JBCCResult();
			
			if (connectionStructList.isEmpty())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("No open connections.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			TDLValidateResult tdlValidateResult = TDLParser.validateTableJson(ABCdef);
			
			if (!tdlValidateResult.getSuccess())
			{
				_returnresult.setStatus(0);
				_returnresult.setMessage("Table creation string invalid format.");
				returnresult.add(_returnresult);
				return returnresult;
			}
			
			for (ConnectionStruct _connectionStruct : connectionStructList)
			{
				
				JBCCService.Client myJBCCClient=_connectionStruct.get_client();
				
				if (myJBCCClient == null)
				{
					_returnresult.setStatus(0);
					_returnresult.setMessage("Could not retrieve Thrift client.");
					returnresult.add(_returnresult);
					return returnresult;
				}
				
				try
		        {	
					JBCCResult returnresultback = myJBCCClient.createABC(ABCname, ABCdef);  
					returnresult.add(returnresultback);
		            
		        } catch (JBCCException e){
		        	_returnresult.setStatus(0);
					_returnresult.setMessage(e.getMessage());
					returnresult.add(_returnresult);
					return returnresult;
		        }
			}

		    return returnresult;
		
	}
	
	 /**
     * @param args
     * @throws TException 
     */
    public static void main(String[] args) throws TException
    {
    	
    	List<String> mylist = new ArrayList<String>();
    	JBCCClient myJBCCClient = JBCCClient.getInstance();
    	myJBCCClient.InitializeClient("192.168.0.91:2181,192.168.0.92:2181,192.168.0.93:2181", "/tdng_dw");
    	
    	mylist = myJBCCClient.GetNodeAddress("/tdng_dw");
    	
    	System.out.println(mylist.size());
    	//System.out.println(mylist.get(0));
    	
    	/*
            JBCCClient myJBCCClient = JBCCClient.getInstance();
            //myJBCCClient.OpenConnection("TBCName");
            myJBCCClient.OpenSecureConnection("TBCName", "/Users/Wei/Documents/workspace/truststore.jks", "cerio1");
            long start=System.currentTimeMillis();
            
            for (int i=0;i<10000;i++)
            {
            	try
            	{
            		myJBCCClient.fastselectFromBC("TBC1", String.valueOf(i));
            	}
            	catch (JBCCException e){}
            }
            
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("tableName", "test");
            jsonObj.put("uuid", 12345678);
            
        	try
        	{
        		List<JBCCResult> returnresult = myJBCCClient.createABC( "TBCNode", jsonObj.toJSONString());
            	System.out.println(returnresult.get(0).getStatus() + returnresult.get(0).getMessage());
        		
        	}
        	catch (JBCCException e){}
                    	
            myJBCCClient.CloseConnection();
            
            myJBCCClient.OpenAsyncConnection("TBCNode", 16, 16);
            ArrayList<JBCCResult> asyncresults = new ArrayList<JBCCResult>();
            
            for (int i = 0; i < 16; i++) {
                //myJBCCClient.AsyncInsertToBC("content", "TBCName");
            	myJBCCClient.asyncSelectFromBC("TBCName", "condition", asyncresults);
                         // Use the pool
            }
            
            myJBCCClient.CloseAsyncConnection();
            
            
            long end=System.currentTimeMillis();
            System.out.println((end-start)+" ms");
             */
        	while (true) {
    			try {
					Thread.sleep(1000);
					//System.out.println(asyncresults.size());
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    		}
		
    }
}
